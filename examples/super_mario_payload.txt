EXTENSION OS_DETECTION
    REM VERSION 1.0

    REM USB Rubber Ducky Host OS Detection
    REM Generic OS detection at a high view is a moving target
    REM results may vary greatly depending 
    REM on a combination of many variables:
    REM  - number of testing stages
    REM  - specific devices and versions tested against
    REM  - number of systems testing for (scope)
    REM  - detection techniques (passive/invisible/active/hybrid)
    REM  - overall speed
    REM  - overall accuracy

    REM TARGET:
    REM DEFAULT - Windows, Mac, Linux
    REM ADVANCED_DETECTION - Windows, Mac, Linux, iOS, ChromeOS, Android

    REM USAGE:
    REM Uncomment the function call below to run this extension inline (here)
    REM or call DETECT_OS() anywhere in your payload after the extension
    REM Place this extension and the DETECT_OS() before
    REM you would like to first reference $_OS to execute payload code conditionally

    REM DEPLOYMENT:
    REM Plug Ducky into host

    REM begin extension options
    DEFINE VERBOSE FALSE
    DEFINE ADVANCED_DETECTION FALSE
    DEFINE STARTUP_DELAY 1500
    DEFINE RESTART_WAIT 1000
    DEFINE OS_DETECT_MODE HID
    DEFINE OS_DETECT_VID VID_05AC
    DEFINE OS_DETECT_PID PID_021E
    DEFINE WINDOWS_HOST_REQUEST_COUNT 2
    DEFINE HOST_RESPONSE_TIMEOUT 1000
    REM end extension options

    FUNCTION DETECT_OS()
        $_HOST_CONFIGURATION_REQUEST_COUNT = 0
        ATTACKMODE OS_DETECT_MODE OS_DETECT_VID OS_DETECT_PID
        DELAY STARTUP_DELAY
        SAVE_HOST_KEYBOARD_LOCK_STATE
    
        IF VERBOSE THEN
            IF ADVANCED_DETECTION THEN
                STRING ADVANCED OS DETECT
            ELSE 
                STRING OS DETECT
            END_IF
    
            ENTER
            STRING test caps
        END_IF
    
        IF ($_CAPSLOCK_ON == FALSE) THEN
            LED_R
            CAPSLOCK
            DELAY HOST_RESPONSE_TIMEOUT 
        END_IF
        LED_OFF
    
        IF VERBOSE THEN
            ENTER
            STRING test done
        END_IF
    
        IF $_RECEIVED_HOST_LOCK_LED_REPLY THEN
            IF VERBOSE THEN
                ENTER
                STRING received led response
            END_IF
            LED_G
            IF ($_HOST_CONFIGURATION_REQUEST_COUNT > WINDOWS_HOST_REQUEST_COUNT) THEN
                IF VERBOSE THEN
                    ENTER
                    STRING prediction: Windows
                END_IF
                $_OS = WINDOWS
            ELSE
                IF VERBOSE THEN
                    ENTER
                    STRING prediction: Linux
                END_IF
                $_OS = LINUX
            END_IF
        ELSE
            IF VERBOSE THEN
                ENTER
                STRING no led response
                ENTER
                STRING prediciton: MacOS
            END_IF
            $_OS = MACOS
        END_IF
    
        IF ADVANCED_DETECTION THEN
            IF ( $_OS == LINUX ) THEN
                IF VERBOSE THEN
                    ENTER
                    STRING soft reconnect
                END_IF
                ATTACKMODE OFF
                DELAY RESTART_WAIT
                ATTACKMODE OS_DETECT_MODE OS_DETECT_VID OS_DETECT_PID
                DELAY CONNECT_WAIT
                IF VERBOSE THEN
                    ENTER
                    STRING reconnected
                END_IF
                IF ($_CAPSLOCK_ON == TRUE) THEN
                    IF VERBOSE THEN
                        ENTER
                        STRING caps led on
                        ENTER
                        STRING test numlock
                    END_IF
                    NUMLOCK
                    DELAY HOST_RESPONSE_TIMEOUT
                    IF VERBOSE THEN
                        ENTER
                        STRING test done
                    END_IF
                    IF ($_NUMLOCK_ON == FALSE) THEN
                        IF VERBOSE THEN
                            ENTER
                            STRING no numlock led
                            ENTER
                            STRING prediciton: ChromeOS
                        END_IF
                        $_OS = CHROMEOS
                    ELSE
                        IF VERBOSE THEN
                            ENTER
                            STRING numlock led on
                            ENTER
                            STRING testing scrolllock
                        END_IF
                        SCROLLLOCK
                        DELAY HOST_RESPONSE_TIMEOUT
                        IF VERBOSE THEN
                            ENTER
                            STRING test done
                        END_IF
                        IF ($_SCROLLLOCK_ON == TRUE) THEN
                            IF VERBOSE THEN
                                ENTER
                                STRING scrolllock led on
                                ENTER
                                STRING prediciton: Android
                            END_IF
                            $_OS = ANDROID
                        ELSE
                            IF VERBOSE THEN
                                ENTER
                                STRING no scrolllock reply 
                                ENTER
                                STRING prediction: Linux
                            END_IF
                            $_OS = LINUX
                        END_IF
                    END_IF
                END_IF
            ELSE IF ($_OS == MACOS) THEN
                IF ($_CAPSLOCK_ON == TRUE) THEN
                    IF VERBOSE THEN
                        ENTER
                        STRING caps led on
                        ENTER
                        STRING prediction: iOS
                    END_IF
                    $_OS = IOS
                ELSE 
                    IF VERBOSE THEN
                        ENTER
                        STRING no caps reply
                        ENTER
                        STRING prediction: MacOS
                    END_IF
                    $_OS = MACOS
                END_IF
            ELSE IF ($_OS == WINDOWS) THEN
                IF VERBOSE THEN
                    ENTER
                    STRING Confident Windows Prediction
                END_IF
                $_OS = WINDOWS
            END_IF
        END_IF
    
        RESTORE_HOST_KEYBOARD_LOCK_STATE
        
        IF VERBOSE THEN
            ENTER
            STRING OS_DETECT complete
            ENTER
        END_IF
    END_FUNCTION
    
    REM Uncomment the function call below to run this extension inline (here)
    REM or call DETECT_OS() anywhere in your payload after the extension

    DETECT_OS()
END_EXTENSION

IF ($_OS == WINDOWS) THEN
    GUI r
ELSE IF ($_OS == MACOS) THEN
    COMMAND SPACE
ELSE IF ($_OS == LINUX) THEN
    CONTROL ESCAPE
ELSE
    GUI
END_IF

DELAY 1000
STRING https://www.onlinepianist.com/virtual-piano
ENTER
DELAY 2000

FUNCTION tick()
    DELAY 30
END_FUNCTION

HOLD w
HOLD 5
HOLD m
DELAY 20
RELEASE w
RELEASE 5
RELEASE m
tick()
HOLD w
HOLD 5
HOLD m
DELAY 20
RELEASE w
RELEASE 5
RELEASE m
tick()
DELAY 20
tick()
HOLD w
HOLD 5
HOLD m
DELAY 20
RELEASE w
RELEASE 5
RELEASE m
tick()
DELAY 20
tick()
HOLD w
HOLD 5
HOLD b
DELAY 20
RELEASE w
RELEASE 5
RELEASE b
tick()
HOLD w
HOLD 5
HOLD m
DELAY 20
RELEASE w
RELEASE 5
RELEASE m
tick()
DELAY 20
tick()
HOLD t
HOLD u
HOLD .
DELAY 20
RELEASE t
RELEASE u
RELEASE .
tick()
DELAY 20
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD t
HOLD x
DELAY 20
RELEASE t
RELEASE x
tick()
DELAY 20
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD t
HOLD p
HOLD b
DELAY 20
RELEASE t
RELEASE p
RELEASE b
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD e
HOLD x
DELAY 20
RELEASE e
RELEASE x
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD q
HOLD p
DELAY 20
RELEASE q
RELEASE p
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD r
HOLD c
DELAY 20
RELEASE r
RELEASE c
tick()
DELAY 20
tick()
HOLD t
HOLD v
DELAY 20
RELEASE t
RELEASE v
tick()
DELAY 20
tick()
HOLD 5
HOLD f
DELAY 20
RELEASE 5
RELEASE f
tick()
HOLD r
HOLD c
DELAY 20
RELEASE r
RELEASE c
tick()
DELAY 20
tick()
HOLD e
HOLD x
DELAY 20
RELEASE e
RELEASE x
tick()
HOLD i
HOLD m
DELAY 20
RELEASE i
RELEASE m
tick()
DELAY 20
tick()
HOLD p
HOLD .
DELAY 20
RELEASE p
RELEASE .
tick()
HOLD z
HOLD /
DELAY 20
RELEASE z
RELEASE /
tick()
DELAY 20
tick()
HOLD o
HOLD ,
DELAY 20
RELEASE o
RELEASE ,
tick()
HOLD p
HOLD .
DELAY 20
RELEASE p
RELEASE .
tick()
DELAY 20
tick()
HOLD i
HOLD m
DELAY 20
RELEASE i
RELEASE m
tick()
DELAY 20
tick()
HOLD y
HOLD b
DELAY 20
RELEASE y
RELEASE b
tick()
HOLD u
HOLD n
DELAY 20
RELEASE u
RELEASE n
tick()
HOLD t
HOLD v
DELAY 20
RELEASE t
RELEASE v
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD t
HOLD p
HOLD b
DELAY 20
RELEASE t
RELEASE p
RELEASE b
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD e
HOLD x
DELAY 20
RELEASE e
RELEASE x
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD q
HOLD p
DELAY 20
RELEASE q
RELEASE p
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD r
HOLD c
DELAY 20
RELEASE r
RELEASE c
tick()
DELAY 20
tick()
HOLD t
HOLD v
DELAY 20
RELEASE t
RELEASE v
tick()
DELAY 20
tick()
HOLD 5
HOLD f
DELAY 20
RELEASE 5
RELEASE f
tick()
HOLD r
HOLD c
DELAY 20
RELEASE r
RELEASE c
tick()
DELAY 20
tick()
HOLD e
HOLD x
DELAY 20
RELEASE e
RELEASE x
tick()
HOLD i
HOLD m
DELAY 20
RELEASE i
RELEASE m
tick()
DELAY 20
tick()
HOLD p
HOLD .
DELAY 20
RELEASE p
RELEASE .
tick()
HOLD z
HOLD /
DELAY 20
RELEASE z
RELEASE /
tick()
DELAY 20
tick()
HOLD o
HOLD ,
DELAY 20
RELEASE o
RELEASE ,
tick()
HOLD p
HOLD .
DELAY 20
RELEASE p
RELEASE .
tick()
DELAY 20
tick()
HOLD i
HOLD m
DELAY 20
RELEASE i
RELEASE m
tick()
DELAY 20
tick()
HOLD y
HOLD b
DELAY 20
RELEASE y
RELEASE b
tick()
HOLD u
HOLD n
DELAY 20
RELEASE u
RELEASE n
tick()
HOLD t
HOLD v
DELAY 20
RELEASE t
RELEASE v
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD q
DELAY 20
RELEASE q
tick()
DELAY 20
tick()
HOLD m
HOLD .
DELAY 20
RELEASE m
RELEASE .
tick()
HOLD e
HOLD l
DELAY 20
RELEASE e
RELEASE l
tick()
HOLD n
HOLD ,
DELAY 20
RELEASE n
RELEASE ,
tick()
HOLD v
HOLD n
DELAY 20
RELEASE v
RELEASE n
tick()
HOLD i
DELAY 20
RELEASE i
tick()
HOLD b
HOLD m
DELAY 20
RELEASE b
RELEASE m
tick()
HOLD r
DELAY 20
RELEASE r
tick()
HOLD p
HOLD d
DELAY 20
RELEASE p
RELEASE d
tick()
HOLD z
HOLD c
DELAY 20
RELEASE z
RELEASE c
tick()
HOLD i
HOLD b
DELAY 20
RELEASE i
RELEASE b
tick()
DELAY 20
tick()
HOLD i
HOLD c
DELAY 20
RELEASE i
RELEASE c
tick()
HOLD z
HOLD b
DELAY 20
RELEASE z
RELEASE b
tick()
HOLD z
HOLD n
DELAY 20
RELEASE z
RELEASE n
tick()
HOLD q
DELAY 20
RELEASE q
tick()
DELAY 20
tick()
HOLD m
HOLD .
DELAY 20
RELEASE m
RELEASE .
tick()
HOLD e
HOLD l
DELAY 20
RELEASE e
RELEASE l
tick()
HOLD n
HOLD ,
DELAY 20
RELEASE n
RELEASE ,
tick()
HOLD v
HOLD n
DELAY 20
RELEASE v
RELEASE n
tick()
HOLD t
DELAY 20
RELEASE t
tick()
HOLD i
HOLD m
DELAY 20
RELEASE i
RELEASE m
tick()
DELAY 20
tick()
HOLD b
HOLD ,
HOLD .
DELAY 20
RELEASE b
RELEASE ,
RELEASE .
tick()
DELAY 20
tick()
HOLD b
HOLD ,
HOLD .
DELAY 20
RELEASE b
RELEASE ,
RELEASE .
tick()
HOLD b
HOLD ,
HOLD .
DELAY 20
RELEASE b
RELEASE ,
RELEASE .
tick()
DELAY 20
tick()
HOLD t
DELAY 20
RELEASE t
tick()
DELAY 20
tick()
HOLD q
DELAY 20
RELEASE q
tick()
DELAY 20
tick()
HOLD m
HOLD .
DELAY 20
RELEASE m
RELEASE .
tick()
HOLD e
HOLD l
DELAY 20
RELEASE e
RELEASE l
tick()
HOLD n
HOLD ,
DELAY 20
RELEASE n
RELEASE ,
tick()
HOLD v
HOLD n
DELAY 20
RELEASE v
RELEASE n
tick()
HOLD i
DELAY 20
RELEASE i
tick()
HOLD b
HOLD m
DELAY 20
RELEASE b
RELEASE m
tick()
HOLD r
DELAY 20
RELEASE r
tick()
HOLD p
HOLD d
DELAY 20
RELEASE p
RELEASE d
tick()
HOLD z
HOLD c
DELAY 20
RELEASE z
RELEASE c
tick()
HOLD i
HOLD b
DELAY 20
RELEASE i
RELEASE b
tick()
DELAY 20
tick()
HOLD i
HOLD c
DELAY 20
RELEASE i
RELEASE c
tick()
HOLD z
HOLD b
DELAY 20
RELEASE z
RELEASE b
tick()
HOLD z
HOLD n
DELAY 20
RELEASE z
RELEASE n
tick()
HOLD q
DELAY 20
RELEASE q
tick()
DELAY 20
tick()
HOLD 6
HOLD d
HOLD j
DELAY 20
RELEASE 6
RELEASE d
RELEASE j
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD 7
HOLD z
HOLD n
DELAY 20
RELEASE 7
RELEASE z
RELEASE n
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD i
HOLD p
HOLD b
DELAY 20
RELEASE i
RELEASE p
RELEASE b
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD t
DELAY 20
RELEASE t
tick()
HOLD t
DELAY 20
RELEASE t
tick()
DELAY 20
tick()
HOLD q
DELAY 20
RELEASE q
tick()
DELAY 20
tick()
HOLD 6
HOLD d
HOLD b
DELAY 20
RELEASE 6
RELEASE d
RELEASE b
tick()
HOLD d
HOLD b
DELAY 20
RELEASE d
RELEASE b
tick()
DELAY 20
tick()
HOLD 3
HOLD d
HOLD b
DELAY 20
RELEASE 3
RELEASE d
RELEASE b
tick()
DELAY 20
tick()
HOLD b
DELAY 20
RELEASE b
tick()
HOLD 6
HOLD n
DELAY 20
RELEASE 6
RELEASE n
tick()
DELAY 20
tick()
HOLD t
HOLD x
HOLD m
DELAY 20
RELEASE t
RELEASE x
RELEASE m
tick()
HOLD b
DELAY 20
RELEASE b
tick()
DELAY 20
tick()
HOLD q
HOLD c
DELAY 20
RELEASE q
RELEASE c
tick()
HOLD x
DELAY 20
RELEASE x
tick()
DELAY 20
tick()
HOLD t
DELAY 20
RELEASE t
tick()
DELAY 20
tick()
HOLD 6
HOLD d
HOLD b
DELAY 20
RELEASE 6
RELEASE d
RELEASE b
tick()
HOLD d
HOLD b
DELAY 20
RELEASE d
RELEASE b
tick()
DELAY 20
tick()
HOLD 3
HOLD d
HOLD b
DELAY 20
RELEASE 3
RELEASE d
RELEASE b
tick()
DELAY 20
tick()
HOLD b
DELAY 20
RELEASE b
tick()
HOLD 6
HOLD n
DELAY 20
RELEASE 6
RELEASE n
tick()
HOLD x
HOLD m
DELAY 20
RELEASE x
RELEASE m
tick()
HOLD t
DELAY 20
RELEASE t
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD q
DELAY 20
RELEASE q
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD t
DELAY 20
RELEASE t
tick()
DELAY 20
tick()
HOLD 6
HOLD d
HOLD b
DELAY 20
RELEASE 6
RELEASE d
RELEASE b
tick()
HOLD d
HOLD b
DELAY 20
RELEASE d
RELEASE b
tick()
DELAY 20
tick()
HOLD 3
HOLD d
HOLD b
DELAY 20
RELEASE 3
RELEASE d
RELEASE b
tick()
DELAY 20
tick()
HOLD b
DELAY 20
RELEASE b
tick()
HOLD 6
HOLD n
DELAY 20
RELEASE 6
RELEASE n
tick()
DELAY 20
tick()
HOLD t
HOLD x
HOLD m
DELAY 20
RELEASE t
RELEASE x
RELEASE m
tick()
HOLD b
DELAY 20
RELEASE b
tick()
DELAY 20
tick()
HOLD q
HOLD c
DELAY 20
RELEASE q
RELEASE c
tick()
HOLD x
DELAY 20
RELEASE x
tick()
DELAY 20
tick()
HOLD t
DELAY 20
RELEASE t
tick()
DELAY 20
tick()
HOLD w
HOLD 5
HOLD m
DELAY 20
RELEASE w
RELEASE 5
RELEASE m
tick()
HOLD w
HOLD 5
HOLD m
DELAY 20
RELEASE w
RELEASE 5
RELEASE m
tick()
DELAY 20
tick()
HOLD w
HOLD 5
HOLD m
DELAY 20
RELEASE w
RELEASE 5
RELEASE m
tick()
DELAY 20
tick()
HOLD w
HOLD 5
HOLD b
DELAY 20
RELEASE w
RELEASE 5
RELEASE b
tick()
HOLD w
HOLD 5
HOLD m
DELAY 20
RELEASE w
RELEASE 5
RELEASE m
tick()
DELAY 20
tick()
HOLD t
HOLD u
HOLD .
DELAY 20
RELEASE t
RELEASE u
RELEASE .
tick()
DELAY 20
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD t
HOLD x
DELAY 20
RELEASE t
RELEASE x
tick()
DELAY 20
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD q
HOLD m
DELAY 20
RELEASE q
RELEASE m
tick()
HOLD c
HOLD b
DELAY 20
RELEASE c
RELEASE b
tick()
DELAY 20
tick()
HOLD t
HOLD p
HOLD x
DELAY 20
RELEASE t
RELEASE p
RELEASE x
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD i
HOLD d
DELAY 20
RELEASE i
RELEASE d
tick()
DELAY 20
tick()
HOLD r
HOLD c
DELAY 20
RELEASE r
RELEASE c
tick()
HOLD b
HOLD ,
DELAY 20
RELEASE b
RELEASE ,
tick()
HOLD r
DELAY 20
RELEASE r
tick()
HOLD b
HOLD ,
DELAY 20
RELEASE b
RELEASE ,
tick()
HOLD i
HOLD c
DELAY 20
RELEASE i
RELEASE c
tick()
HOLD i
DELAY 20
RELEASE i
tick()
HOLD r
DELAY 20
RELEASE r
tick()
DELAY 20
tick()
HOLD w
HOLD v
DELAY 20
RELEASE w
RELEASE v
tick()
HOLD ,
HOLD /
DELAY 20
RELEASE ,
RELEASE /
tick()
DELAY 20
tick()
HOLD t
HOLD ,
HOLD /
DELAY 20
RELEASE t
RELEASE ,
RELEASE /
tick()
HOLD ,
HOLD /
DELAY 20
RELEASE ,
RELEASE /
tick()
DELAY 20
tick()
HOLD u
HOLD .
DELAY 20
RELEASE u
RELEASE .
tick()
HOLD n
HOLD ,
DELAY 20
RELEASE n
RELEASE ,
tick()
HOLD t
HOLD m
DELAY 20
RELEASE t
RELEASE m
tick()
HOLD c
HOLD b
DELAY 20
RELEASE c
RELEASE b
tick()
HOLD t
DELAY 20
RELEASE t
tick()
HOLD z
HOLD c
DELAY 20
RELEASE z
RELEASE c
tick()
HOLD i
HOLD x
DELAY 20
RELEASE i
RELEASE x
tick()
HOLD i
DELAY 20
RELEASE i
tick()
HOLD t
DELAY 20
RELEASE t
tick()
DELAY 20
tick()
HOLD q
HOLD m
DELAY 20
RELEASE q
RELEASE m
tick()
HOLD c
HOLD b
DELAY 20
RELEASE c
RELEASE b
tick()
DELAY 20
tick()
HOLD t
HOLD p
HOLD x
DELAY 20
RELEASE t
RELEASE p
RELEASE x
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD i
HOLD d
DELAY 20
RELEASE i
RELEASE d
tick()
DELAY 20
tick()
HOLD r
HOLD c
DELAY 20
RELEASE r
RELEASE c
tick()
HOLD b
HOLD ,
DELAY 20
RELEASE b
RELEASE ,
tick()
HOLD r
DELAY 20
RELEASE r
tick()
HOLD b
HOLD ,
DELAY 20
RELEASE b
RELEASE ,
tick()
HOLD i
HOLD c
DELAY 20
RELEASE i
RELEASE c
tick()
HOLD i
DELAY 20
RELEASE i
tick()
HOLD r
DELAY 20
RELEASE r
tick()
DELAY 20
tick()
HOLD t
HOLD v
DELAY 20
RELEASE t
RELEASE v
tick()
HOLD n
HOLD ,
DELAY 20
RELEASE n
RELEASE ,
tick()
DELAY 20
tick()
HOLD t
HOLD n
HOLD ,
DELAY 20
RELEASE t
RELEASE n
RELEASE ,
tick()
HOLD t
HOLD ,
DELAY 20
RELEASE t
RELEASE ,
tick()
DELAY 20
tick()
HOLD y
HOLD m
DELAY 20
RELEASE y
RELEASE m
tick()
HOLD u
HOLD v
HOLD n
DELAY 20
RELEASE u
RELEASE v
RELEASE n
tick()
HOLD i
HOLD x
HOLD b
DELAY 20
RELEASE i
RELEASE x
RELEASE b
tick()
HOLD p
DELAY 20
RELEASE p
tick()
HOLD t
DELAY 20
RELEASE t
tick()
HOLD p
DELAY 20
RELEASE p
tick()
HOLD q
HOLD i
DELAY 20
RELEASE q
RELEASE i
tick()
DELAY 20
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD t
HOLD p
HOLD b
DELAY 20
RELEASE t
RELEASE p
RELEASE b
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD e
HOLD x
DELAY 20
RELEASE e
RELEASE x
tick()
DELAY 20
tick()
DELAY 20
tick()
HOLD q
HOLD p
DELAY 20
RELEASE q
RELEASE p
tick()
DELAY 20
tick()
HOLD r
HOLD c
DELAY 20
RELEASE r
RELEASE c
tick()
HOLD v
DELAY 20
RELEASE v
tick()
DELAY 20
tick()
HOLD c
DELAY 20
RELEASE c
tick()
HOLD 2
HOLD z
HOLD d
DELAY 20
RELEASE 2
RELEASE z
RELEASE d
tick()
HOLD f
DELAY 20
RELEASE f
tick()
DELAY 20
tick()
HOLD c
DELAY 20
RELEASE c
tick()
HOLD q
HOLD p
HOLD x
DELAY 20
RELEASE q
RELEASE p
RELEASE x
tick()
HOLD z
DELAY 20
RELEASE z
tick()
HOLD q
HOLD p
HOLD x
DELAY 20
RELEASE q
RELEASE p
RELEASE x
tick()
